<?php

namespace Proxies\__CG__\Quartet\Bundle\KakarotBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Attendance extends \Quartet\Bundle\KakarotBundle\Entity\Attendance implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setUpdateDate()
    {
        $this->__load();
        return parent::setUpdateDate();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setAttended($attended)
    {
        $this->__load();
        return parent::setAttended($attended);
    }

    public function getAttended()
    {
        $this->__load();
        return parent::getAttended();
    }

    public function setReturned($returned)
    {
        $this->__load();
        return parent::setReturned($returned);
    }

    public function getReturned()
    {
        $this->__load();
        return parent::getReturned();
    }

    public function setBreak1Started($break1Started)
    {
        $this->__load();
        return parent::setBreak1Started($break1Started);
    }

    public function getBreak1Started()
    {
        $this->__load();
        return parent::getBreak1Started();
    }

    public function setBreak1Ended($break1Ended)
    {
        $this->__load();
        return parent::setBreak1Ended($break1Ended);
    }

    public function getBreak1Ended()
    {
        $this->__load();
        return parent::getBreak1Ended();
    }

    public function setBreak2Started($break2Started)
    {
        $this->__load();
        return parent::setBreak2Started($break2Started);
    }

    public function getBreak2Started()
    {
        $this->__load();
        return parent::getBreak2Started();
    }

    public function setBreak2Ended($break2Ended)
    {
        $this->__load();
        return parent::setBreak2Ended($break2Ended);
    }

    public function getBreak2Ended()
    {
        $this->__load();
        return parent::getBreak2Ended();
    }

    public function setNote($note)
    {
        $this->__load();
        return parent::setNote($note);
    }

    public function getNote()
    {
        $this->__load();
        return parent::getNote();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function setDeleted($deleted)
    {
        $this->__load();
        return parent::setDeleted($deleted);
    }

    public function getDeleted()
    {
        $this->__load();
        return parent::getDeleted();
    }

    public function setUser(\Quartet\Bundle\KakarotBundle\Entity\User $user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'attended', 'returned', 'break1Started', 'break1Ended', 'break2Started', 'break2Ended', 'note', 'created', 'updated', 'deleted', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}