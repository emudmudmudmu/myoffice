<?php

namespace Quartet\Bundle\KakarotBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Quartet\Bundle\KakarotBundle\Entity\PaidHoliday;
use Quartet\Bundle\KakarotBundle\Entity\User;


/**
 * PaidHolidayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaidHolidayRepository extends EntityRepository
{

    /**
     * 指定の月の登録情報を取得する。
     * @param $date
     * @param $user
     * @return $entities
     */
    public function getEntities($date, User $user)
    {
        $firstDay = $date. '-01';
        $lastDay = date('Y-m-d', strtotime($date. ' last day +1 month'));

        $entities = $this->createQueryBuilder('p')
            ->where('p.startDate >= :firstDay')
            ->setParameter('firstDay', $firstDay)
            ->andwhere('p.startDate <= :lastDay')
            ->setParameter('lastDay', $lastDay)
            ->andwhere('p.author = :user')
            ->setParameter('user', $user->getId())
            ->orderby('p.startDate', 'ASC')
            ->getQuery()
            ->getResult();

        return $entities;
    }

    /**
     * 新規登録時に、同一日が登録されているか確認する
     * @param paidHolidayEntity
     * @return boolean true: 同一日あり, false: 同一日なし
     */
    public function isNewFindSameDate(PaidHoliday $paidHolidayEntity)
    {
        return $this->isFindSameDate($paidHolidayEntity, 'new');
    }

    /**
     * 編集時に、同一日が登録されているか確認する
     * @param paidHolidayEntity
     * @return boolean true: 同一日あり, false: 同一日なし
     */
    public function isEditFindSameDate(PaidHoliday $paidHolidayEntity)
    {
        return $this->isFindSameDate($paidHolidayEntity, 'edit');
    }

    /**
     * 同一日が登録されているか確認する
     * @param paidHolidayEntity
     * @param type : new or edit
     * @return boolean true: 同一日あり, false: 同一日なし
     */
    private function isFindSameDate(PaidHoliday $paidHolidayEntity, $type)
    {
        $query = $this->createQueryBuilder('p');
        $query->where('p.author = :author')
            ->setParameter('author', $paidHolidayEntity->getAuthor()->getId())
            ->andwhere($query->expr()->between('p.startDate', ':date1', ':date2'))
            ->setParameter('date1', $paidHolidayEntity->getStartDate()->format('Y-m-d'))
            ->setParameter('date2', $paidHolidayEntity->getEndDate()->format('Y-m-d'))
            ->andwhere($query->expr()->between('p.endDate', ':date3', ':date4'))
            ->setParameter('date3', $paidHolidayEntity->getStartDate()->format('Y-m-d'))
            ->setParameter('date4', $paidHolidayEntity->getEndDate()->format('Y-m-d'));
        if ('edit' == $type) {
            $query->andwhere('p.id != :id')
                ->setParameter('id', $paidHolidayEntity->getId());
        }

        $entity = $query->getQuery()->getResult();

        if (0 != count($entity)) {
            return true;
        }

        return false;
    }

    /**
     * 指定の承認者が承認を必要とする有休申請情報を取得する。
     * @param $user
     * @return $entities
     */
    public function getApprovalEntities(User $user)
    {
        $entities = array();

        $em = $this->getEntityManager();
        $userEntities = $em->getRepository('QuartetKakarotBundle:User')->findBy(array('parent' => $user->getId()));

        if (0 < count($userEntities)) {
            foreach ($userEntities as $value) {
                $results = $this->createQueryBuilder('p')
                    ->where('p.approver = :user')
                    ->setParameter('user', $value->getId())
                    ->getQuery()
                    ->getResult();

                $entities = array_merge($entities, $results);
            }
        }

        return $entities;
    }
}
