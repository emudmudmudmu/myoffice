<?php

namespace Quartet\Bundle\KakarotBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Quartet\Bundle\KakarotBundle\Entity\Expense;
use Quartet\Bundle\KakarotBundle\Entity\User;


/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    /**
     * 指定の月の登録情報を取得する。
     * @param $date
     * @param $user
     * @return $entities
     */
    public function getEntities($date, User $user)
    {
        $firstDay = $date. '-01';
        $lastDay = date('Y-m-d', strtotime($date. ' last day +1 month'));

        $entities = $this->createQueryBuilder('n')
            ->where('n.created >= :firstDay')
            ->setParameter('firstDay', $firstDay)
            ->andwhere('n.created <= :lastDay')
            ->setParameter('lastDay', $lastDay)
            ->andwhere('n.user = :user')
            ->setParameter('user', $user->getId())
            ->orderby('n.created', 'DESC')
            ->getQuery()
            ->getResult();

        return $entities;
    }

    /**
     * 経費項目の申請を行ったときの通知
     * @param $expense
     */
    public function sendExpenseProcessing(Expense $expense)
    {
        $this->sendMessage($expense->getUser(), '経費を申請しています。');
    }

    /**
     * 経費項目の精算を行ったときの通知
     * @param $expense
     */
    public function sendExpenseClosed(Expense $expense)
    {
        $this->sendMessage($expense->getUser(), '経費が精算されました。');
    }

    /**
     * 有休申請を行ったときの通知
     * @param $expense
     */
    public function sendPaidHolidayProcessing(PaidHoliday $paidHoliday)
    {
        $this->sendMessage(null == $paidHoliday->getAuthor()->getParent() ?
            $paidHoliday->getAuthor() :
            $paidHoliday->getAuthor()->getParent()
            , '有給申請が申し込まれました。');
    }

    /**
     * 有休申請を承認したときの通知
     * @param $expense
     */
    public function sendPaidHolidayClosed(PaidHoliday $paidHoliday)
    {
        $this->sendMessage($paidHoliday->getAuthor(), '有給申請が承認されました。');
    }

    /**
     * 経費項目の精算を行ったときの通知
     * @param $expense
     */
    private function sendMessage(User $user, $message)
    {
        $em = $this->getEntityManager();

        $entity = new Notification();
        $entity->setUser($user);
        $entity->setContent($message);
        $entity->setIsRead(false);

        $em->persist($entity);
        $em->flush();
    }

    /**
     * 一括既読を行う
     * @param $date
     * @param $user
     */
    public function allAlreadyRead($date, User $user)
    {
        $entities = $this->getEntities($date, $user);

        foreach ($entities as $value) {
            $query = $this->createQueryBuilder('n')
                ->update('QuartetKakarotBundle:Notification', 'n')
                ->set('n.isRead', ':isread')
                ->setParameter('isread', true)
                ->where('n.id = :id')
                ->setParameter('id', $value->getId())
                ->getQuery()
                ->execute();
        }
    }
}
